name: Generate Notes Assets

on:
  push:
    branches:
      - main
    paths:
      - 'Notes/**'

permissions:
  contents: write

jobs:
  build-and-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Check for new notes
        id: check
        run: |
          if [ ! -d "Notes" ]; then
            echo "Notes directory does not exist, no new notes to process."
            echo "has_changes=0" >> $GITHUB_OUTPUT
            echo "has_new_docxs=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          NOTES_TO_GENERATE=$(find Notes/ -type f \( -name "*.pdf" -o -name "*.docx" \) | while read -r NOTE; do
            THUMBNAIL_PATH="resources/thumbnails/$(basename "$NOTE" | sed 's/\(.*\)\./\1_/').jpg"
            if [[ ! -f "$THUMBNAIL_PATH" ]]; then
              echo "$NOTE"
            fi
          done)

          if [ -z "$NOTES_TO_GENERATE" ]; then
            echo "No new notes to process."
            echo "has_changes=0" >> $GITHUB_OUTPUT
            echo "has_new_docxs=false" >> $GITHUB_OUTPUT
          else
            echo "New notes to process found."
            echo "has_changes=1" >> $GITHUB_OUTPUT
            
            if echo "$NOTES_TO_GENERATE" | grep -q '.docx$'; then
              echo "has_new_docxs=true" >> $GITHUB_OUTPUT
            else
              echo "has_new_docxs=false" >> $GITHUB_OUTPUT
            fi
            
            echo "$NOTES_TO_GENERATE" > new_notes_to_process.txt
          fi

      - name: Install common dependencies (npm, imagemagick, poppler-utils)
        if: steps.check.outputs.has_changes > 0
        run: |
          npm install @octokit/rest fs path
          sudo apt-get update
          sudo apt-get install -y imagemagick poppler-utils

      - name: Install DOCX-specific dependencies (unoconv, libreoffice)
        if: steps.check.outputs.has_new_docxs == 'true'
        run: |
          sudo apt-get install -y unoconv libreoffice-writer

      - name: Generate Notes Metadata and Thumbnails
        if: steps.check.outputs.has_changes > 0
        run: |
          node .github/workflows/generate-notes-metadata.js
          
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          mkdir -p resources/thumbnails
          
          while read -r NOTE; do
            THUMBNAIL_PATH="resources/thumbnails/$(basename "$NOTE" | sed 's/\(.*\)\./\1_/').jpg"
            echo "Generating thumbnail for ${NOTE}"
            if [[ "$NOTE" == *.pdf ]]; then
              pdftocairo -jpeg -singlefile -scale-to 600 "$NOTE" "${THUMBNAIL_PATH%.jpg}"
            elif [[ "$NOTE" == *.docx ]]; then
              unoconv --stdout -f pdf "$NOTE" > temp.pdf
              pdftocairo -jpeg -singlefile -scale-to 600 temp.pdf "${THUMBNAIL_PATH%.jpg}"
              rm temp.pdf
            fi

            if [[ -f "${THUMBNAIL_PATH%.jpg}" ]]; then
              echo "Compressing thumbnail: ${THUMBNAIL_PATH%.jpg}"
              mogrify -quality 70 "${THUMBNAIL_PATH%.jpg}"
            fi
          done < new_notes_to_process.txt
          
      - name: Delete Orphaned Thumbnails
        if: steps.check.outputs.has_changes > 0
        run: |
          find Notes/ -type f \( -name "*.pdf" -o -name "*.docx" \) > notes.txt
          find resources/thumbnails/ -type f -name "*.jpg" | while read -r THUMBNAIL; do
            NOTE_NAME=$(basename "$THUMBNAIL" .jpg | sed 's/\(.*\)_/\1./')
            if ! grep -q "Notes/${NOTE_NAME}.pdf" notes.txt && ! grep -q "Notes/${NOTE_NAME}.docx" notes.txt; then
              echo "Deleting orphaned thumbnail: $THUMBNAIL"
              rm "$THUMBNAIL"
            fi
          done

      - name: Commit changes
        if: steps.check.outputs.has_changes > 0
        run: |
          git add resources/notes_metadata.json
          git add resources/thumbnails/
          git commit -m "feat(ci): Auto-generate notes metadata and thumbnails"
          git pull --rebase
          git push
